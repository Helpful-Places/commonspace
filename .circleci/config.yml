version: 2

# important circle ci variables to set
# FIREBASE_TOKEN - https://firebase.google.com/docs/cli#cli-ci-systems and https://docs.travis-ci.com/user/deployment/firebase/#generating-your-firebase-token
# GCP_PROJECT_NAME - https://cloud.google.com/resource-manager/docs/creating-managing-projects
# GCP_SERVICE_ACCOUNT_KEY - (https://circleci.com/docs/2.0/google-auth/ https://cloud.google.com/sdk/docs/authorizing#authorizing_with_a_service_account)
# HOME - a build in CircleCi environment variable (https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables)
# https://circleci.com/docs/2.0/deployment-integrations/#google-cloud
jobs:

  validate:
    docker:
      - image: hashicorp/packer:light

    steps:
      - checkout
      - run:
         name: validate
         command: |
             packer validate deployment/commons_nginx.json
             packer validate deployment/commons_server.json

  lint:
    docker:
      - image: node:10.15

    steps:
      - checkout

      - run:
          name: install
          command: yarn

      - run:
          name: lint
          command: yarn lint

      - run:
          name: prettier
          command: yarn prettier-check

  deploy-firebase-functions:
    docker:
        - image: californianseabass/gcloud-node:v0.0.1

    steps:
        - run: &setup_gcloud
           name: authenticate gcloud service account
           command: |
                echo "${GCP_SERVICE_ACCOUNT_KEY}" > ${HOME}/gcp-key.json
                gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                gcloud --quiet config set project ${GCP_PROJECT_NAME}

        - checkout

        - run:
           name: deploy firebase cloud functions and configure environment
           command: |
                npm install -g node-gyp firebase-tools
                cd functions/ && npm install && cd ..
                firebase functions:config:set  gcp.cloud_functions_host="${CLOUD_FUNCTIONS_HOST}"  --project "${FIREBASE_PROJECT_ID}" --token "${FIREBASE_TOKEN}"
                firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}" --token "${FIREBASE_TOKEN}"

  build-admin-server-image:
    docker:
      - image: californianseabass/gcloud-packer-docker:v0.0.2

    steps:
        - run:
           name: setup docker
           command: echo y | gcloud auth configure-docker

        - run: &setup_gcloud
           name: authenticate gcloud service account
           command: |
                echo "${GCP_SERVICE_ACCOUNT_KEY}" > ${HOME}/gcp-key.json
                gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                gcloud --quiet config set project ${GCP_PROJECT_NAME}

        - checkout

        - setup_remote_docker

        - run:
           name: build and push commons server image to GC Registry for k8s to have access
           command: |
                jq '."post-processors"[0][1] |= . + { "type":"docker-push","login": true,"login_username":"_json_key","login_password":"{{user `GCLOUD_JSON_KEY`}}","login_server":"https://gcr.io"}' deployment/commons_server.json > deployment/commons_server.json.tmp && mv deployment/commons_server.json.tmp deployment/commons_server.json
                packer build -var "container_image_name=us.gcr.io/${GCP_PROJECT_NAME}/commons-server" -var version=$(git rev-parse --short=8 HEAD) -var GCLOUD_JSON_KEY="${GCP_SERVICE_ACCOUNT_KEY}" -var NODE_ENV=production deployment/commons_server.json

  build-nginx-image:
    docker:
      - image: californianseabass/gcloud-packer-docker:v0.0.2

    steps:
        - run:
           name: setup docker
           command: echo y | gcloud auth configure-docker

        - run: &setup_gcloud
           name: authenticate gcloud service account
           command: |
                echo "${GCP_SERVICE_ACCOUNT_KEY}" > ${HOME}/gcp-key.json
                gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                gcloud --quiet config set project ${GCP_PROJECT_NAME}

        - checkout

        - setup_remote_docker

        - run:
            name: build and push nginx image to GC Registry for k8s to have access
            command: |
                jq '."post-processors"[0][1] |= . + { "type":"docker-push","login": true,"login_username":"_json_key","login_password":"{{user `GCLOUD_JSON_KEY`}}","login_server":"https://gcr.io"}' deployment/commons_nginx.json > deployment/commons_nginx.json.tmp && mv deployment/commons_nginx.json.tmp deployment/commons_nginx.json
                packer build -var container_image_name=us.gcr.io/${GCP_PROJECT_NAME}/commons-nginx -var version=$(git rev-parse --short=8 HEAD) -var GCLOUD_JSON_KEY="${GCP_SERVICE_ACCOUNT_KEY}" -var FIREBASE_API_KEY="${FIREBASE_WEB_API_KEY}" -var FIREBASE_AUTH_DOMAIN="${FIREBASE_AUTH_DOMAIN}" -var FIREBASE_PROJECT_ID="${FIREBASE_PROJECT_ID}" -var FIREBASE_APP_ID="${FIREBASE_APP_ID}" -var NODE_ENV=production deployment/commons_nginx.json

  patch-k8s:
      docker:
        - image: californianseabass/gcloud-packer-docker:v0.0.2

      steps:
          - run:
             name: setup docker
             command: echo y | gcloud auth configure-docker

          - run:
              <<: *setup_gcloud

          - checkout

          - run:
              name: patch K8s configs
              command: |
                mkdir /tmp/k8s
                PATCH_JSON=$(jq ".spec.template.spec.containers[0]={\"name\": \"commons-nginx\",\"image\": \"us.gcr.io/${GCP_PROJECT_NAME}/commons-nginx:$(git rev-parse --short=8 HEAD)\"}" <<< '{"spec": {"template": {"spec": {"containers": [ ] } } } }' | jq ".spec.template.spec.containers[1]={\"name\": \"commons-server\",\"image\": \"us.gcr.io/${GCP_PROJECT_NAME}/commons-server:$(git rev-parse --short=8 HEAD)\"}")
                kubectl patch --local -o yaml -p "$PATCH_JSON" -f deployment/commons.yml > /tmp/k8s/commons.tmp.yml
                yq ".spec.template.spec.containers[2].command[1]=\"-instances=${SQL_INSTANCE_CONNECTION_NAME_STAGING}=tcp:5432\"" /tmp/k8s/commons.tmp.yml > /tmp/k8s/commons-staging.yml
                yq ".spec.template.spec.containers[2].command[1]=\"-instances=${SQL_INSTANCE_CONNECTION_NAME_PROD}=tcp:5432\"" /tmp/k8s/commons.tmp.yml > /tmp/k8s/commons-production.yml
                rm /tmp/k8s/commons.tmp.yml
                cp deployment/commons_nginx_service.yml /tmp/k8s/
                cp deployment/commons_server_service.yml /tmp/k8s/
                yq ".spec.domains[0]=\"${STAGING_DOMAIN_NAME}\"" deployment/managed-certificate.yml > /tmp/k8s/staging-certificate.yml
                yq ".spec.rules[0].host=\"${STAGING_DOMAIN_NAME}\"" deployment/commonspace-ingress.yml | sed 's/$IP_ADDRESS/commonspace-staging-ip-address/' > /tmp/k8s/commons-ingress-staging.yml
                yq ".spec.domains[0]=\"${PROD_DOMAIN_NAME}\"" deployment/managed-certificate.yml > /tmp/k8s/prod-certificate.yml
                yq ".spec.rules[0].host=\"${PROD_DOMAIN_NAME}\"" deployment/commonspace-ingress.yml | sed 's/$IP_ADDRESS/commonspace-prod-ip-address/' > /tmp/k8s/commons-ingress-prod.yml

          - persist_to_workspace:
              root: /tmp/
              paths:
                - k8s
          - store_artifacts:
              path: /tmp/k8s

  deploy-cloud-functions:
    docker:
        - image: google/cloud-sdk

    steps:
        - run:
            <<: *setup_gcloud

        - checkout

        - run:
            name: deploy
            command: |
                  gcloud functions deploy saveNewUser --source gcp_functions/ --runtime nodejs10 --trigger-http --update-env-vars DB_HOST="${SQL_INSTANCE_CONNECTION_NAME_PROD}" --update-env-vars DB_USER="${DB_USER}" --update-env-vars DB_PASS="${DB_PASS}" --update-env-vars DB_NAME="${DB_NAME}"

  deploy-staging:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          <<: *setup_gcloud
      - run:
          name: Apply K8s configs
          command: |
            gcloud container clusters get-credentials ${STAGING_CLUSTER_NAME} --zone=${STAGING_ZONE}
            kubectl apply -f /tmp/k8s/commons-staging.yml
            kubectl apply -f /tmp/k8s/commons_nginx_service.yml
            kubectl apply -f /tmp/k8s/commons_server_service.yml
            kubectl apply -f /tmp/k8s/staging-certificate.yml
            kubectl apply -f /tmp/k8s/commons-ingress-staging.yml

  deploy-production:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          <<: *setup_gcloud
      - run:
          name: Apply K8s configs
          command: |
            gcloud container clusters get-credentials ${CLUSTER_NAME} --zone=${PROD_ZONE}
            kubectl apply -f /tmp/k8s/commons-production.yml
            kubectl apply -f /tmp/k8s/commons_nginx_service.yml
            kubectl apply -f /tmp/k8s/commons_server_service.yml
            kubectl apply -f /tmp/k8s/prod-certificate.yml
            kubectl apply -f /tmp/k8s/commons-ingress-prod.yml

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - validate
      - lint
      - build-admin-server-image:
          requires:
            - validate
            - lint
      - build-nginx-image:
          requires:
            - validate
            - lint
      - patch-k8s:
          requires:
            - validate
            - lint
      - deploy-cloud-functions:
          requires:
            - build-admin-server-image
            - build-nginx-image
            - patch-k8s
          filters:
            branches:
              only: master
      - deploy-firebase-functions:
          requires:
            - build-admin-server-image
            - build-nginx-image
            - patch-k8s
          filters:
            branches:
              only: master
      - deploy-staging:
          requires:
            - build-admin-server-image
            - build-nginx-image
            - patch-k8s
      - hold:
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          requires:
            - hold
